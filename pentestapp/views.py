import os  # pour metasploit
import nmap
import subprocess  # pour openvas
import webbrowser  # pour openvas
from typing import List, Any
from django.shortcuts import render
from django.http import HttpResponseRedirect, HttpResponse
from django.contrib.auth.decorators import login_required
from openvas_lib import VulnscanManager, VulnscanException
from .forms import ScanForm

HOST = "192.168.144.128"
USER = "fatou"
PASSWORD = "root"
TIMEOUT = 3000
PORT = 80


def index(request):
    return render(request, "pentestapp/index.html")
# @login_required(login_url='/admin/')


def scan(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        res = ""
        form = ScanForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            nmScan = nmap.PortScanner()
            print(form)
            target = request.POST['target']
            resultat = nmScan.scan(hosts=target, arguments='-sV')
            ports = resultat['scan'][target]['tcp']
            res = []

            for i in ports:
                porti = ports[i]
                print(porti['state'])
                res.append({'port': i, 'state': porti['state'], 'name': porti['name'],
                            'product': porti['product'], 'version': porti['version']})
        return render(request, "pentestapp/scan_result.html", {"resultat": res, "target": target})
    # if a GET (or any other method) we'll create a blank form
    else:
        form = ScanForm()
        return render(request, 'pentestapp/scan_form.html', {'form': form})

# @login_required(login_url='/admin/')


def scan_reseau(request):
    # if this is a POST request we need to process the form data
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        res = ""
        form = ScanForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            nma = nmap.PortScanner()
            print(form)
            target = request.POST['target']
            result = nma.scan(hosts=target, arguments='-sP')
            res = []
            print(result)
            hosts_list = [x for x in nma.all_hosts()]
            t = len(hosts_list)
            for i in range(0, t):
                print("HÃ´te: ", hosts_list[i])
                host = hosts_list[i]
                print("         Nom: ", nma[host]['hostnames'])
               # hostname1 = int(nma[host]['hostnames']['name'])
               # print(hostname1)
               # hostname = hostname1[10:61]
                print("         Adresses: ", nma[host]['addresses'])
                print("         AdresseIPv4: ", nma[host]['addresses']['ipv4'])
                try:
                    print("         AdresseMAC: ",
                          nma[host]['addresses']['mac'])
                    adresseMAC = nma[host]['addresses']['mac']
                except:
                    print("       AdressesMAC: none")
                    adresseMAC = "  none"
                print("         Etat: ", nma[host]['status'])
                print("         Etat: ", nma[host]['status']['state'])
                print()
                res.append({'host': hosts_list[i], 'state': nma[host]['status']['state'], 'hostname': nma[host]
                            ['hostnames'], 'adresseIPv4': nma[host]['addresses']['ipv4'], 'adresseMAC': adresseMAC})
        return render(request, "pentestapp/scan_reseau_result.html", {"resultat": res, "result": result})
    # if a GET (or any other method) we'll create a blank form
    else:
        form = ScanForm()
        return render(request, 'pentestapp/scan_reseau_form.html', {'form': form})


def analyse(request):

    try:
        scanner = VulnscanManager(HOST, USER, PASSWORD, PORT, TIMEOUT)
        scan_id, target_id = scanner.launch_scan(target="192.168.144.135",  # Target to scan
                                                 profile="Full and fast")
    except VulnscanException as e:
        print("Error:")
        print(e)
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})


def exploit(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})


def post_exploit(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})


def rapport(request):
    analyse = "liste des vulnerabilites ici"
    return render(request, "pentestapp/analyse_result.html", {"analyse": analyse})


def pentest_sys(request):
    return render(request, "pentestapp/pentestSys.html", {})


def pentest_web(request):
    return render(request, "pentestapp/pentestWeb.html", {})


def pentest_res(request):
    return render(request, "pentestapp/pentestRes.html", {})


def about(request):
    return render(request, "pentestapp/about.html", {})


def collecte(request):
    col = "collecte d'informations"
    return render(request, "pentestapp/collecte.html", {"col": col})


def launch_openvas(request):
    try:
        # openvas operations
        subprocess.call("openvasmd")
        subprocess.call("openvas-start")
        new = 2
        lien = "http://127.0.0.1:9392"
        webbrowser.open(lien, 2)
        message = "Succes"
    except Exception as error:
        message = "Echec"
        print("Error :", error)
    return HttpResponse(message)


def launch_metasploit(request):
    try:
        os.system("""gnome-terminal -- 'msfconsole'  """)
        message = "Succes"
    except Exception as error:
        print("Error :", error)
        message = "Echec"
    return HttpResponse(message)


def launch_owasp(request):
    try:
        message = "Succes"
        subprocess.call("/root/ZAP_2.7.0/zap.sh")
    except Exception as error:
        print("Erreur :", error)
        message = "Echec"

    return HttpResponse(message)
